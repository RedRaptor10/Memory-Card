{"version":3,"sources":["components/Header.js","components/Cards.js","components/Win.js","App.js","index.js"],"names":["Header","props","id","score","highScore","Cards","deck","map","card","i","name","rank","suit","className","alt","src","Win","type","onClick","playAgain","App","cards","suits","ranks","index","j","push","useState","setDeck","pickedCards","setPickedCards","setScore","setHighScore","win","setWin","useEffect","pickCard","event","parseInt","target","alreadyPicked","forEach","c","length","concat","array","randomIndex","a","slice","Math","floor","random","temp","randomizeArray","cardElements","document","querySelectorAll","addEventListener","removeEventListener","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a8dd694a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n\treturn (\n\t\t<div id=\"header\">\n\t\t\t<h1 id=\"title\">Memory Card Game</h1>\n\t\t\t<div id=\"scores\">\n\t\t\t\t<div id=\"score\">Score: {props.score}</div>\n\t\t\t\t<div id=\"high-score\">High Score: {props.highScore}</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Header;","import React from 'react';\n\nconst Cards = (props) => {\n\tconst cardsPath = '/images/cards/';\n\tconst ext = '.png';\n\n\t//const newCards = randomizeArray(props.cards);\n\n\treturn (\n\t\t<div id=\"cards-container\">\n\t\t{props.deck.map((card, i) => {\n\t\t\tconst name = card.rank + '_of_' + card.suit;\n\t\t\treturn (\n\t\t\t\t<div key={i}>\n\t\t\t\t\t<img id={card.id} className='card' alt='' src={cardsPath + name + ext} />\n\t\t\t\t</div>\n\t\t\t);\n\t\t})}\n\t\t</div>\n\t);\n};\n\nexport default Cards;","import React from 'react';\n\nconst Win = (props) => {\n\treturn (\n\t\t<div id=\"win-screen\">\n\t\t\t<h1 id=\"win-text\">You Win!</h1>\n\t\t\t<button id=\"play-again-btn\" type=\"button\" onClick={props.playAgain}>Play Again</button>\n\t\t</div>\n\t);\n};\n\nexport default Win;","import React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Cards from './components/Cards';\nimport Win from './components/Win';\n\nconst App = () => {\n\tconst cards = [];\n\tconst suits = ['clubs', 'diamonds', 'hearts', 'spades'];\n\tconst ranks = ['ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king'];\n\n\tlet index = 0;\n\tfor (let i = 0; i < 13; i++) {\n\t\tfor (let j = 0; j < 4; j++) {\n\t\t\tcards.push({\n\t\t\t\tid: index,\n\t\t\t\trank: ranks[i],\n\t\t\t\tsuit: suits[j]\n\t\t\t});\n\n\t\t\tindex++;\n\t\t}\n\t}\n\n\tconst [deck, setDeck] = useState(cards);\n\tconst [pickedCards, setPickedCards] = useState([]);\n\tconst [score, setScore] = useState(0);\n\tconst [highScore, setHighScore] = useState(0);\n\tconst [win, setWin] = useState(false);\n\n\t// Shuffle array using Fisher-Yates algorithm\n\tconst randomizeArray = (array) => {\n\t\tlet a = array.slice(); // Clone array because cannot directly modify state\n\n\t\t// While there are elements to shuffle\n\t\tfor (let i = a.length - 1, randomIndex; i > 0; i--) {\n\t\t\t// Pick a remaining element at random\n\t\t\trandomIndex = Math.floor(Math.random() * i);\n\n\t\t\t// Swap with current element\n\t\t\tlet temp = a[i];\n\t\t\ta[i] = a[randomIndex];\n\t\t\ta[randomIndex] = temp;\n\t\t}\n\n\t\treturn a;\n\t};\n\n\tuseEffect(() => {\n\t\tconst pickCard = (event) => {\n\t\t\tconst id = parseInt(event.target.id); // Get card id and parse as int\n\t\t\tlet alreadyPicked = false;\n\n\t\t\t// Check if card has already been picked\n\t\t\tpickedCards.forEach(c => {\n\t\t\t\tif (c.id === id) {\n\t\t\t\t\talreadyPicked = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/* If not already picked or is first card, add to picked cards & increase score,\n\t\t\totherwise reset states and set high score */\n\t\t\tif (!alreadyPicked || pickedCards.length === 0) {\n\t\t\t\tsetPickedCards(pickedCards.concat(cards[id]));\n\t\t\t\tsetScore(score + 1);\n\t\t\t\tsetDeck(randomizeArray(deck));\n\n\t\t\t\t// Check win condition\n\t\t\t\tif (score + 1 === cards.length) {\n\t\t\t\t\tsetWin(true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetPickedCards([]);\n\t\t\t\tsetScore(0);\n\t\t\t\tsetDeck(cards);\n\n\t\t\t\tif (score > highScore) {\n\t\t\t\t\tsetHighScore(score);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Add event listeners to cards\n\t\tconst cardElements = document.querySelectorAll('.card');\n\t\tcardElements.forEach(c => {\n\t\t\tc.addEventListener('click', pickCard);\n\t\t});\n\n\t\t// On component unmount, remove event listeners from cards\n\t\treturn () => {\n\t\t\tcardElements.forEach(c => {\n\t\t\t\tc.removeEventListener('click', pickCard);\n\t\t\t});\n\t\t};\n\t}); // Leave out dependency array [] to useEffect on component mount & update\n\n\t// On Play Again\n\tconst playAgain = () => {\n\t\tsetPickedCards([]);\n\t\tsetScore(0);\n\t\tsetHighScore(0);\n\t\tsetDeck(cards);\n\t\tsetWin(false);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Header score={score} highScore={highScore} />\n\t\t\t{win ? <Win win={win} playAgain={playAgain} /> : <Cards deck={deck} />}\n\t\t</div>\n\t);\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}